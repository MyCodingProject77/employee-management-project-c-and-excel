



 1) Install Microsoft.Office.Interop.Excel via NuGet Package Manager.



 using Excel = Microsoft.Office.Interop.Excel;


  For design: Load button, search button and textbox, and reset button, datagridview





using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Excel = Microsoft.Office.Interop.Excel;

namespace EmployeeManagement
{
    public partial class Form1 : Form
    {
        private DataTable dt = new DataTable();
        public Form1()
        {
            InitializeComponent();
        }

        private void btnLoadExcel_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "Excel Files|*.xls;*.xlsx;*.xlsm"
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string excelPath = openFileDialog.FileName;
                LoadExcelData(excelPath);
            }
        }

        private void LoadExcelData(string filePath)
        {
            Excel.Application excelApp = new Excel.Application();
            Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);
            Excel.Worksheet worksheet = workbook.Sheets[1];
            Excel.Range range = worksheet.UsedRange;

            dt.Clear();
            dt.Columns.Clear();

            // Read Column Header
            for (int col = 1; col <= range.Columns.Count; col++)
            {
                dt.Columns.Add(range.Cells[1, col].Value2.ToString());
            }

            // Read Rows
            for (int row = 2; row <= range.Rows.Count; row++)
            {
                DataRow dr = dt.NewRow();
                for (int col = 1; col <= range.Columns.Count; col++)
                {
                    dr[col - 1] = range.Cells[row, col].Value2?.ToString() ?? "";
                }
                dt.Rows.Add(dr);
            }
            workbook.Close(false);
            excelApp.Quit();

            dataGridView1.DataSource = dt;
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            string searchValue = txtSearch.Text.Trim();
            if (string.IsNullOrEmpty(searchValue))
            {
                MessageBox.Show("Please enter a valid ID to search.", "Search", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            DataView dv = dt.DefaultView;
            dv.RowFilter = $"[ID] = '{searchValue}'";
            dataGridView1.DataSource = dv.ToTable();

        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtSearch.Clear();
            DataView dv = dt.DefaultView;
            dv.RowFilter = string.Empty;
            dataGridView1.DataSource = dv.ToTable();
        }

        
    }
}
